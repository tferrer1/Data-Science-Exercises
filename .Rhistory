#lets first make up a fake list of  IDS from 1 to 1000 and 1000 random variables drawn from a normal distribution
df = data.frame("ID"=seq(1,1000), "randomvariable"=rnorm(1000))
#lets now make a function to do the work - you can copy paste this function into your own scripts
# it needs to be given a dataframe and a list of naming options
# Options might be "treatment" and "control", or if there are more than 2 options then it might be "Control", "treatment1", "treatment2", or just "LayoutA", "LayoutB"
RCT_random = function(dataframey, values_to_add){
set.seed(111)
dataframey$values_to_add[sample(1:nrow(dataframey), nrow(dataframey), FALSE)] <- rep(values_to_add)
colnames(dataframey)[which(colnames(dataframey)=="values_to_add")] = "Status"
return(dataframey) }
# so this will take the dataframe called "df" and randomly assign each ROW to "Treatment" or "control"
df_new = RCT_random(df, c("Treatment","Control"))
df
head(df_new)
which([1,2,3])
which(c(1,2,3)
)
which(c(True, False, TRUE))
which(c(FALSE, TRUE))
which(c(FALSE, TRUE, TRUE))
nrow(df)
rep(c("Happy","Sad"))
1:20(df_new)
sample(1:nrow(df), nrow(df), FALSE)
1:nrow(df)
nrow(df)
1:20
rep(c("hello","gbye"))
rep(c("hello","gbye"), 4)
head(df_new)
df_new$gender[sample(1:nrow(df_new),nrow(df_new),FALSE)] <- rep(c('Male','Female'))
head(df_new)
count(df_new$gender)
df_new$gender
head(df_new)
aggregate(df_new$ID, by=list(df_new$gender))
aggregate(df_new$ID, by=list(df_new$gender), FUN=count)
aggregate(df_new$ID, by=list(df_new$gender), FUN=count.fields())
library(dplyr)
df_new %>% group_by(gender) %>% summarise(counts = n())
df_new %>% group_by(gender)
df = data.frame(ID=seq(1,100), variableA=rnorm(100,500,50),  bank_name=c("first_bank","second_bank","third_bank","last_bank"), District=c("A","B"))
library(knitr)
kable(df[1:5,], format="markdown", align="c")
ICC_CI <- function(cluster_level,outcomevar, dataf){
#load library
require(ICC)
set.seed(123)
si = round(dim(dataf)[1]*0.66)
values_f <- c()
for(i in seq(1:50)){
samp_f = dataf[sample(nrow(dataf), si), ]
x_f = ICCbare(cluster_level,outcomevar,samp_f)
values_f <- c(values_f, x_f)
}
# note that 1.96StDevs = 95% confidence interval bounds in a normal dist.
ret = data.frame("Mean ICC" = round(mean(values_f, na.rm=TRUE),3), "CI" = round(1.96*sd(values_f, na.rm=TRUE),3))
ret$Significant = ifelse(ret$Mean.ICC > ret$CI, "Y", "N")
return( ret)
}
stored_ICC <- ICC_CI("bank_name", "variableA", df)
require(ICC)
install.packages("ICC")
ICC_CI <- function(cluster_level,outcomevar, dataf){
#load library
require(ICC)
set.seed(123)
si = round(dim(dataf)[1]*0.66)
values_f <- c()
for(i in seq(1:50)){
samp_f = dataf[sample(nrow(dataf), si), ]
x_f = ICCbare(cluster_level,outcomevar,samp_f)
values_f <- c(values_f, x_f)
}
# note that 1.96StDevs = 95% confidence interval bounds in a normal dist.
ret = data.frame("Mean ICC" = round(mean(values_f, na.rm=TRUE),3), "CI" = round(1.96*sd(values_f, na.rm=TRUE),3))
ret$Significant = ifelse(ret$Mean.ICC > ret$CI, "Y", "N")
return( ret)
}
stored_ICC <- ICC_CI("bank_name", "variableA", df)
stored_ICC
dim(df)
dim(df)[1]
dim(df)[1]*.66
seq(1:4)
ICCbare("bank_level","variableA", df)
head(df)
ICCbare("bank_name","variableA", df)
ICCbare(bank_name,variableA, df)
help(ggplot)
??ggplot
library(ggplot2)
help(ggplot)
updateR()
exit
exit()
